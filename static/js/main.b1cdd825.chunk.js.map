{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","useState","count","setCount","installPrompt","setInstallPrompt","useEffect","console","log","ready","e","preventDefault","window","addEventListener","removeEventListener","className","onClick","prompt","userChoice","then","choiceResult","outcome","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","catch","error","rootElement","document","getElementById","hasChildNodes","hydrate","render","URL","process","href","origin","fetch","headers","response","contentType","get","status","indexOf","unregister","reload","checkValidServiceWorker"],"mappings":"4IAwCeA,G,KArCH,WAAO,IAAD,EACUC,mBAAS,GADnB,mBACTC,EADS,KACFC,EADE,OAE0BF,mBAAS,MAFnC,mBAETG,EAFS,KAEMC,EAFN,KAIhBC,qBAAU,WACRC,QAAQC,IAAI,iBACZ,IAAMC,EAAQ,SAAAC,GACZA,EAAEC,iBACFN,EAAiBK,IAInB,OADAE,OAAOC,iBAAiB,sBAAuBJ,GACxC,WACLG,OAAOE,oBAAoB,sBAAuBL,MAEnD,IAYH,OACE,yBAAKM,UAAU,OACb,uCACA,qCAAWb,GACX,4BAAQc,QAAS,kBAAMb,EAASD,EAAQ,KAAxC,kBACCE,GAAiB,4BAAQY,QAfV,WAClBZ,EAAca,SACdb,EAAcc,WAAWC,MAAK,SAAAC,GACC,aAAzBA,EAAaC,SACfd,QAAQC,IAAI,iCAEdH,EAAiB,WASC,sBCvBlBiB,EAAcC,QACW,cAA7BX,OAAOY,SAASC,UAEe,UAA7Bb,OAAOY,SAASC,UAEhBb,OAAOY,SAASC,SAASC,MACvB,2DAsCN,SAASC,EAAgBC,EAAOC,GAC9BC,UAAUC,cACPC,SAASJ,GACTT,MAAK,SAAAc,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBG,QACfR,UAAUC,cAAcQ,YAI1BhC,QAAQC,IACN,iHAKEqB,GAAUA,EAAOW,UACnBX,EAAOW,SAASP,KAMlB1B,QAAQC,IAAI,sCAGRqB,GAAUA,EAAOY,WACnBZ,EAAOY,UAAUR,WAO5BS,OAAM,SAAAC,GACLpC,QAAQoC,MAAM,4CAA6CA,MC3FjE,IAAMC,EAAcC,SAASC,eAAe,QACxCF,EAAYG,gBACdC,kBAAQ,kBAAC,EAAD,MAASJ,GAEjBK,iBAAO,kBAAC,EAAD,MAASL,GDaX,SAAkBf,GACvB,GAA6C,kBAAmBC,UAAW,CAGzE,GADkB,IAAIoB,IAAIC,WAAwBvC,OAAOY,SAAS4B,MACpDC,SAAWzC,OAAOY,SAAS6B,OAIvC,OAGFzC,OAAOC,iBAAiB,QAAQ,WAC9B,IAAMe,EAAK,UAAMuB,WAAN,sBAEP7B,IAgEV,SAAiCM,EAAOC,GAEtCyB,MAAM1B,EAAO,CACX2B,QAAS,CAAE,iBAAkB,YAE5BpC,MAAK,SAAAqC,GAEJ,IAAMC,EAAcD,EAASD,QAAQG,IAAI,gBAEnB,MAApBF,EAASG,QACO,MAAfF,IAA8D,IAAvCA,EAAYG,QAAQ,cAG5C9B,UAAUC,cAActB,MAAMU,MAAK,SAAAc,GACjCA,EAAa4B,aAAa1C,MAAK,WAC7BP,OAAOY,SAASsC,eAKpBnC,EAAgBC,EAAOC,MAG1Ba,OAAM,WACLnC,QAAQC,IACN,oEAvFAuD,CAAwBnC,EAAOC,GAI/BC,UAAUC,cAActB,MAAMU,MAAK,WACjCZ,QAAQC,IACN,iHAMJmB,EAAgBC,EAAOC,OCpC/BE,I","file":"static/js/main.b1cdd825.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport './styl/App.css'\n\nconst App = () => {\n  const [count, setCount] = useState(0)\n  const [installPrompt, setInstallPrompt] = useState(null)\n\n  useEffect(() => {\n    console.log('useing effect')\n    const ready = e => {\n      e.preventDefault()\n      setInstallPrompt(e)\n    }\n\n    window.addEventListener('beforeinstallprompt', ready)\n    return () => {\n      window.removeEventListener('beforeinstallprompt', ready)\n    }\n  }, [])\n\n  const installA2HS = () => {\n    installPrompt.prompt()\n    installPrompt.userChoice.then(choiceResult => {\n      if (choiceResult.outcome === 'accepted') {\n        console.log('User accepted the A2HS prompt')\n      }\n      setInstallPrompt(null)\n    })\n  }\n\n  return (\n    <div className=\"App\">\n      <p>SCRIPT-8</p>\n      <p>count: {count}</p>\n      <button onClick={() => setCount(count + 1)}>Increase count</button>\n      {installPrompt && <button onClick={installA2HS}>Add to homepage</button>}\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n)\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA',\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.',\n      )\n    })\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister()\n    })\n  }\n}\n","import React from 'react'\nimport { hydrate, render } from 'react-dom'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nconst rootElement = document.getElementById('root')\nif (rootElement.hasChildNodes()) {\n  hydrate(<App />, rootElement)\n} else {\n  render(<App />, rootElement)\n}\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register()\n"],"sourceRoot":""}